# -*- coding: utf-8 -*-
"""Stock_prediction_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qMAIOkIx6BC0dqPQVqe0m_cejNZ0JHRQ
"""

#Import requried modules
!pip install yfinance==0.1.68
!pip install fbprophet
!pip install yfinance
!pip install fbprophet
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from pandas_datareader import data as pdr
import datetime as datetime
import yfinance as yf
from fbprophet import Prophet
from fbprophet.plot import plot_plotly, plot_components_plotly

"""### Stock trend prediction using Decision Tree Regression"""

#Load the data
yf.pdr_override() # <== that's all it takes :-)
start_date = input('Enter start date in the form of YYYY-MM-DD')
end_date = input('Enter end date in the form of YYYY-MM-DD')
stock_name=input('Enter stock ticket')
df = pdr.get_data_yahoo(stock_name, start_date, end_date)

#Store data into a data frame
df.head(1369)

#Get the number of trading days
df.shape

#Get the close price
df = df[['Close']]
df.head(1751)

#Create a variable to predict 'x' days out of the future 
future_days = 90
df['Prediction'] = df[['Close']].shift(-future_days)
df.tail(1751)

#Create a feature data set (X) and convert it to a numpy array and remove the last 'x' rows/days
X = np.array(df.drop(['Prediction'], 1))[:-future_days]

#Create the target data set (Y) and convert it to a numpy array and get all of the target values except the last 'X' rows/days
Y = np.array(df['Prediction'])[:-future_days]

#Split the data into 90% training and 10% testing
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size=.95, 
                                                    test_size = 0.05,
                                                    shuffle=True) 

#Create the decision tree regressor model
tree = DecisionTreeRegressor().fit(X_train, Y_train)

#Get the last 'X' rows of the feature data set
X_future = df.drop(['Prediction'], 1)[:-future_days]
X_future = X_future.tail(future_days)
X_future = np.array(X_future)

#Show the model tree prediction 
tree_prediction = tree.predict(X_future)

#Visualize the predicted data using the tree prediction model
predictions = tree_prediction
valid = df[X.shape[0]:]
valid['Predictions'] = predictions
fig = plt.figure(figsize=(20,25))
ax1 = fig.add_subplot(211)
ax1.set_title('Model')
ax1.set_xlabel('Date')
ax1.set_ylabel('Close price USD')
ax1.plot(valid[['Predictions', 'Close']])
ax1.legend(['Predicted stock price', 'Original stock price'])
plt.show()

"""### Stock trend prediction using Facebook's Prophet algorithm to implement Time Series forecasting"""

#A historical data csv file must be downloaded from yahoo finance to be uploaded

#Load the data
from google.colab import files
uploaded = files.upload()

#Read the data
import io
file_name=input('Enter file name')
df = pd.read_csv(io.BytesIO(uploaded[file_name]))

# Select Date and Price
df = df[["Date","Close"]] 

# Rename the features: These names are required for the model fitting
df = df.rename(columns = {"Date":"ds","Close":"y"}) 
df.head()

# The Prophet class (model)
fbp = Prophet(daily_seasonality = True) 

# Fit the model 
fbp.fit(df)

# We need to specify the number of days in future
periods=int(input('Enter the number of days in the future'))
fut = fbp.make_future_dataframe(periods) 
forecast = fbp.predict(fut)

# VIsualize the predicted stock price
plot_plotly(fbp, forecast)